---
title: "blogpost"
format: html
editor: visual
---

## Intro

Tell the audience what this post is about.


```{r}
#| echo: false
library(arrow)
library(nycflights13)
library(dplyr)
library(lubridate)
library(ggplot2)
```


## Evaluating user-defined functions in Arrow pipelines

User-defined functions are automatically translated if all the underlying bindings are known.

```{r}
flights %>% 
  arrow_table() %>% 
  glimpse()
```

Questions:

* What was the busiest week for JFK Airport? Separate for departures and arrivals.

We need to build some new variables: 

* several timestampt variables:
  * `depart_time`: departure time
  * 

Let's investigate the `dep_time`, data set description informs us the format should be HHMM or HMM, and the timezone is local. 

We notice the departure and arrival times are written in a 3 or 4-digit formats, namely `5:17` is written as 
`517` while `22:09` appears as `2209`. It would be easier to work with them in a format where the digits for hours and minutes are separated by `":"` or any other separator for that matter. Let's create the separated time
variable. Let's first make sure all values `dep_time` are 3 or 4 digits or `NA`.

```{r}
flights %>% 
  arrow_table() %>% 
  mutate(
    dep_time_length = nchar(as.character(dep_time)),
    .keep = "used"
  ) %>% 
  count(dep_time_length) %>% 
  collect()
```

Let's investigate the `dep_times` shorter than 3:
```{r}
flights %>% 
  arrow_table() %>% 
  mutate(
    dep_time_length = nchar(as.character(dep_time)),
    .keep = "used"
  ) %>% 
  filter(dep_time_length < 3) %>% 
  collect()
```

We notice they are quite ambigous and it would be difficult to figure out what hour and minute they refer to. So, the best course of action would be to exclude them together with the missing values from the analysis.

Let's now insert a `":"` separator in the correct position inside `dep_time` and create `dep_time_sep`:

```{r}
flights %>% 
  arrow_table() %>% 
  mutate(
    dep_time = as.character(dep_time),
    dep_time_length = nchar(dep_time),
    .keep = "used"
  ) %>% 
  filter(dep_time_length >= 3 | is.na(dep_time)) %>% 
  mutate(dep_hour = if_else(
      dep_time_length == 3,
      str_sub(dep_time, start = 1, end = 1),
      str_sub(dep_time, start = 1, end = 2)
    ),
    dep_minute = str_sub(dep_time, start = -2),
    dep_time_sep = str_c(dep_hour, dep_minute, sep = ":")
  ) %>% 
  collect()
```

If we want to replicate the separation of hour and minute for the other variables (`sched_dep_time`, `arr_time`, and `sched_arr_time`), we would have quite a bit of duplicated code. Let's try and write a function.

```{r}
sep_hour_minute <- function(x) {
  x <- as.character(x)
  hour <- dplyr::if_else(
    base::nchar(x) == 3,
    stringr::str_sub(x, start = 1, end = 1),
    stringr::str_sub(x, start = 1, end = 2)
  )
  minute <- stringr::str_sub(x, start = -2)
  result <- stringr::str_c(hour, minute, sep = ":")
  result
}
```

NB: I have stopped here as the function above has revealed some issues with the explicit approach.

Now let's re-write the previous chunk using this function:

```{r}
flights2 <- flights %>% 
  arrow_table() %>% 
  mutate(
    dep_time = as.character(dep_time),
    dep_time_length = nchar(dep_time)
  ) %>% 
  filter(dep_time_length >= 3 | is.na(dep_time)) %>% 
  mutate(dep_time_sep = sep_hour_minute(dep_time)) %>% 
  collect()
flights2
```

We can continue our journey to creating a timestamp variable. Next step, bring the components of the timestamp together.

```{r}
flights_date_time <- flights2 %>% 
  arrow_table() %>% 
  mutate(
    depart_time_string = stringr::str_c(year, month, day, dep_time_sep, sep = "-"),
    depart_time = ymd_hm(depart_time_string)
  ) %>%
  select(depart_time) %>% 
  collect()
flights_date_time
```
We can continue by identifying the week for each flight. We can do that with the newly added `floor_date()` binding:
```{r}
a <- flights_date_time %>% 
  arrow_table() %>% 
  mutate(depart_week = floor_date(depart_time, unit = "week", week_start = 1)) %>% 
  count(depart_week) %>% 
  arrange(depart_week) %>% 
  collect()
a
```


```{r}
ggplot(a, aes(depart_week, n)) +
  geom_col() +
  theme_minimal()
```

```{r}
build_timestamp <- function(dataframe, var) {
  dataframe %>% 
    mutate(
      x = as.character({{ var }}),
      time_length = nchar(x)
    ) %>% 
    filter(time_length >= 3 | is.na(x)) %>% 
    mutate(
      time_sep = sep_hour_minute(x),
      time_string = stringr::str_c(year, month, day, time_sep, sep = "-"),
      time = ymd_hm(time_string),
      week = floor_date(time, unit = "week", week_start = 1)
    )
}
```

```{r}
flights %>% 
  arrow_table() %>%
  build_timestamp(dep_time) %>% 
  collect()
```

